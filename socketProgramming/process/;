#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>

void conf_child(int signal){
	int status;
	pid_t child = waitpid(-1, &status, WNOHANG);

	if(WIFEXITED(status)){
		printf("child process dead.. ( id : %d\n)", child);
		printf("child status : %d\n", WEXITSTATUS(status));
	}
}

int main(){

	pid_t pid;
	
	struct sigaction act;
	act.sa_handler = signal(conf_child);
	sigemptyset(&act.sa_mask);
	act.sa_flags = 0;
	
	sigaction(SIGCHLD, &act, 0);
	
	pid = fork();

	if(pid == 0){
		puts("child process start  ================="):
		puts("sleep 10 sec :");
		sleep(10);
		puts("child process end	===================");
		return 10;
	}
	else{
		puts("parent process =================");

		pid = fork();
	
		puts("child process start =================");
	
		if(pid == 0){
			puts("sleep 10 sec :");
			sleep(10);
			puts("child process end ============");
			exit(24);
		}
		else{
			int i = 0;
			printf("child process id >> %d\n", pid);
			
			for(i = 0; i < 5; i++){
				puts("wait...");
				sleep(5); 
	

	
	
